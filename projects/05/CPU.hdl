// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

// instruction[15], 1 == C, 0 == A
// A instruction[0..14] = Constant
// C Instruction
//  [0..2] jumps
//      instruction[0] = j3 jump if < 0
//      instruction[1] = j2 jump if = 0
//      instruction[2] = j1 jump if > 0
//  [3..5] dest
//      instruction[3] = d3 write to M
//      instruction[4] = d2 write to D
//      instruction[5] = d1 write to A
// [6..11] control bits
//      instruction[6]  = c6 no
//      instruction[7]  = c5 f
//      instruction[8]  = c4 ny
//      instruction[9]  = c3 zy
//      instruction[10] = c2 nx
//      instruction[11] = c1 zx
// instruction[12] = a

    PARTS:
    And(a=instruction[5], b=true, out=aRegLoad);
    Not(in=instruction[15], out=opCode);
    And(a=instruction[6], b=true, out=no);
    And(a=instruction[7], b=true, out=f);
    And(a=instruction[8], b=true, out=ny);
    And(a=instruction[9], b=true, out=zy);
    And(a=instruction[10], b=true, out=nx);
    And(a=instruction[11], b=true, out=zx);
    Or(a=opCode, b=instruction[5], out=aMuxSel);
    And(a=instruction[15], b=instruction[12], out=switchAM);


    Mux16(a=aluOut, b=instruction, sel=opCode, out=aMuxOut);
    ARegister(in=aMuxOut, load=aMuxSel, out=aRegOut, out[0..14]=addressM);
    Mux16(a=aRegOut, b=inM, sel=switchAM, out=aluInput1);

    And(a=instruction[15], b=instruction[4], out=dRegLoad);
    DRegister(in=aluOut, load=dRegLoad, out=dRegOut);
    ALU(x=dRegOut, y=aluInput1, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=aluOut, zr=zrOut, ng=ngOut);
    And(a=instruction[15], b=instruction[3], out=writeM);

    // PC
    Not(in=ngOut, out=pos);
    Not(in=zrOut, out=notZero);
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=pos, b=notZero, out=posNotZero);
    And(a=jgt, b=posNotZero, out=load1);

    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=jeq, b=zrOut, out=load2);

    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=jlt, b=ngOut, out=load3);

    Or(a=load1, b=load2, out=loadTemp);
    Or(a=load3, b=loadTemp, out=load);

    PC(in=aRegOut, load=load, inc=true, reset=reset, out[0..14]=pc);

}